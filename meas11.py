import numpy as np
import matplotlib.pyplot as plt

# --- üìù –ê–Ω–æ—Ç–∞—Ü–∏—è ---
print("–°–∏–º—É–ª–∞—Ü–∏—è –Ω–∞ —Å–º—É—â–µ–Ω–∏—è –æ—Ç —Ç—Ä–∏–∞–∫ –∏ –ø—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –∑–∞—Å–µ–≥–Ω–∞—Ç–∏—Ç–µ –ø—Ä–æ–±–∏ –æ—Ç —Å–∏–≥–Ω–∞–ª–∞.")

# --- üîß –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ ---
fs = 10000                     # –ß–µ—Å—Ç–æ—Ç–∞ –Ω–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏—è (Hz)
t = np.linspace(0, 0.5, fs//2) # –í—Ä–µ–º–µ (0.5 —Å–µ–∫)
signal = np.sin(2 * np.pi * 50 * t)  # –ü–æ–ª–µ–∑–µ–Ω —Å–∏–Ω—É—Å–æ–∏–¥–µ–Ω —Å–∏–≥–Ω–∞–ª (50 Hz)

# --- ‚ö°Ô∏è –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ —Ç—Ä–∏–∞–∫ —Å–º—É—â–µ–Ω–∏—è ---
triac_triggers = [0.1, 0.2, 0.3, 0.4]  # –ú–æ–º–µ–Ω—Ç–∏ –Ω–∞ –æ—Ç–ø—É—à–≤–∞–Ω–µ (—Å–µ–∫—É–Ω–¥–∏)
spike_width_ms = 1
spike_amp = 5

noisy_signal = signal.copy()
for trigger in triac_triggers:
    spike_start = int(trigger * fs)
    spike_end = spike_start + int(spike_width_ms * fs / 1000)
    noisy_signal[spike_start:spike_end] += spike_amp * np.random.randn(spike_end - spike_start)

# --- üßπ –ò–∑–æ–ª–∏—Ä–∞–Ω–µ –Ω–∞ —Å–º—É—â–µ–Ω–∏—è (–º–∞—Å–∫–∏—Ä–∞–Ω–µ) ---
def mask_triac_spikes(sig, trigger_times, fs, window_ms=1):
    masked = sig.copy()
    window_samples = int(window_ms * fs / 1000)
    for t_trigger in trigger_times:
        start = int(t_trigger * fs)
        end = start + window_samples
        masked[start:end] = np.nan  # –∏–ª–∏ –∏–Ω—Ç–µ—Ä–ø–æ–ª–∞—Ü–∏—è
    return masked

masked_signal = mask_triac_spikes(noisy_signal, triac_triggers, fs)

# --- üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ---
plt.figure(figsize=(12, 6))
plt.plot(t, noisy_signal, label="–°–º—É—â–∞–≤–∞—â —Å–∏–≥–Ω–∞–ª", alpha=0.5)
plt.plot(t, masked_signal, label="–°–ª–µ–¥ –º–∞—Å–∫–∏—Ä–∞–Ω–µ –Ω–∞ —Å–º—É—â–µ–Ω–∏—è", linewidth=2)
for tx in triac_triggers:
    plt.axvline(tx, color='red', linestyle='--', alpha=0.5, label='–¢—Ä–∏–∞–∫' if tx == triac_triggers[0] else "")
plt.title("–°–∏–º—É–ª–∞—Ü–∏—è –Ω–∞ —Ç—Ä–∏–∞–∫ —Å–º—É—â–µ–Ω–∏—è –∏ –ø—Ä–µ–º–∞—Ö–≤–∞–Ω–µ")
plt.xlabel("–í—Ä–µ–º–µ (s)")
plt.ylabel("–ê–º–ø–ª–∏—Ç—É–¥–∞")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
 